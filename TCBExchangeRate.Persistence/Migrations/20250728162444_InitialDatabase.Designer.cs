// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TCBExchangeRate.Persistence;

#nullable disable

namespace TCBExchangeRate.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250728162444_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TCBExchangeRate.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("TCBExchangeRate.Domain.Entities.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AskRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AskRateTM")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BidRateCK")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BidRateTM")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SnapshotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SnapshotId");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("TCBExchangeRate.Domain.Entities.ExchangeRateSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SnapshotDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRateSnapshots");
                });

            modelBuilder.Entity("TCBExchangeRate.Domain.Entities.ExchangeRate", b =>
                {
                    b.HasOne("TCBExchangeRate.Domain.Entities.Currency", "Currency")
                        .WithMany("ExchangeRates")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCBExchangeRate.Domain.Entities.ExchangeRateSnapshot", "Snapshot")
                        .WithMany("ExchangeRates")
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("TCBExchangeRate.Domain.Entities.Currency", b =>
                {
                    b.Navigation("ExchangeRates");
                });

            modelBuilder.Entity("TCBExchangeRate.Domain.Entities.ExchangeRateSnapshot", b =>
                {
                    b.Navigation("ExchangeRates");
                });
#pragma warning restore 612, 618
        }
    }
}
